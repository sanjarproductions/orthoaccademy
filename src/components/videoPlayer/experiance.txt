// import React from 'react'
import "./videoPlayer.css"
// import { useCallback } from "react";

// import { MdPause } from "react-icons/md";
// import { MdPlayArrow } from "react-icons/md";
// import { MdFullscreen } from "react-icons/md";
// import { MdFullscreenExit } from "react-icons/md";
// import { MdVolumeUp } from "react-icons/md";
// import { MdVolumeOff } from "react-icons/md";

const videoPlayer = () => {

  // Format time (00:00 format)
  // const leadingZero = useMemo(() => new Intl.NumberFormat(undefined, { minimumIntegerDigits: 2 }), []);
  // const formatTime = useCallback((time) => {
  //   const seconds = Math.floor(time % 60);
  //   const minutes = Math.floor(time / 60) % 60;
  //   const hours = Math.floor(time / 3600);

  //   return hours > 0
  //     ? `${hours}:${leadingZero.format(minutes)}:${leadingZero.format(seconds)}`
  //     : `${minutes}:${leadingZero.format(seconds)}`;
  // }, [leadingZero]);

  // Update Duration & Current Time
  // useEffect(() => {
  //   const video = videoRef.current;
  //   if (!video) return;

  //   const updateTime = () => {
  //     if (currentTimeRef.current) {
  //       currentTimeRef.current.textContent = formatTime(video.currentTime);
  //     }
  //     if (progressBarRef.current) {
  //       progressBarRef.current.value = (video.currentTime / video.duration) * 100;
  //     }
  //   };

  //   const setTotalDuration = () => {
  //     if (totalTimeRef.current && !isNaN(video.duration)) {
  //       totalTimeRef.current.textContent = formatTime(video.duration);
  //     }
  //   };

  //   video.addEventListener("loadedmetadata", setTotalDuration);
  //   video.addEventListener("timeupdate", updateTime);

  //   return () => {
  //     video.removeEventListener("loadedmetadata", setTotalDuration);
  //     video.removeEventListener("timeupdate", updateTime);
  //   };
  // }, [formatTime]);

  // Play/Pause className Toggle
  // useEffect(() => {
  //   const video = videoRef.current;
  //   const wrapper = wrapperRef.current;
  //   if (!video || !wrapper) return;

  //   const handlePlay = () => wrapper.classNameList.remove("paused");
  //   const handlePause = () => wrapper.classNameList.add("paused");

  //   video.addEventListener("play", handlePlay);
  //   video.addEventListener("pause", handlePause);

  //   return () => {
  //     video.removeEventListener("play", handlePlay);
  //     video.removeEventListener("pause", handlePause);
  //   };
  // }, []);

  // const togglePlayPause = () => {
  //   const video = videoRef.current;
  //   if (video.paused) {
  //     video.play();
  //   } else {
  //     video.pause();
  //   }
  // };


  // Toggle Full Screen
  // const toggleFullScreen = () => {
  //   if (!document.fullscreenElement) {
  //     wrapperRef.current?.requestFullscreen();
  //     setIsFullScreen(true);
  //   } else {
  //     document.exitFullscreen();
  //     setIsFullScreen(false);
  //   }
  // };


  // Toggle Mute
  // const toggleMute = () => {
  //   if (videoRef.current) {
  //     videoRef.current.muted = !videoRef.current.muted;
  //     setIsMuted(videoRef.current.muted);
  //   }
  // };



  // Time Line
  // useEffect(() => {
  //   const video = videoRef.current;
  //   const progressBar = progressBarRef.current;

  //   if (!video || !progressBar) return;

  //   const handleTimeUpdate = () => {
  //     if (video.duration) {
  //       const progress = (video.currentTime / video.duration) * 100;
  //       progressBar.value = progress;
  //     }
  //   };

  //   video.addEventListener("timeupdate", handleTimeUpdate);
  //   return () => {
  //     video.removeEventListener("timeupdate", handleTimeUpdate);
  //   };
  // }, []);

  // const handleTimelineChange = (e) => {
  //   const video = videoRef.current;
  //   if (!video) return;

  //   const newTime = (parseFloat(e.target.value) / 100) * video.duration;
  //   video.currentTime = newTime;
  // };

  return (
    <div>
      {/* <div className="video-wrapper paused" ref={wrapperRef}>
                <div className="video-controlls">
                  <div className="timeline-container">
                    <div className="progress-line" ref={progressLine}></div>
                    <input type="range" ref={progressBarRef} className="progress-bar" step="0.1" defaultValue={0} min="0" max={videoRef.current?.duration} onInput={handleTimelineChange} />
                  </div>
                  <div className="controlls">
                    <div className="first-pannel">
                      <button className="play-icon" onClick={togglePlayPause}><MdPlayArrow /></button>
                      <button className="pause-icon" onClick={togglePlayPause}><MdPause /></button>
                      <button className="vol-icon" onClick={toggleMute}>{isMuted ? <MdVolumeOff /> : <MdVolumeUp />}</button>

                      <div className="duration">
                        <div className="current-time" ref={currentTimeRef}>0:00</div>
                        /
                        <div className="total-time" ref={totalTimeRef}></div>
                      </div>
                    </div>
                    <div className="second-pannel">
                      <button className="fullscreen-icon" onClick={toggleFullScreen}>  {isFullScreen ? <MdFullscreenExit /> : <MdFullscreen />} </button>
                    </div>
                  </div>
                </div>
                <video className="video-player" src={course?.video_url_list?.[activeVideo]} ref={videoRef}></video>
              </div> */}
    </div>
  )
}

export default videoPlayer
